{# source https://github.com/bcremer/shopware-with-nginx/blob/master/global/shopware.conf #}
{% extends 'php-generic.conf.j2' %}
{% block server_begin %}
set $shopware_env {{ shopware_env | default('production ') }};
set $fpm_upstream {{ username }}-php;
{% endblock %}
{% block server_main %}
## Author: Benjamin Cremer
## Shopware nginx rules.
## Heavily Inspired by https://github.com/perusio/drupal-with-nginx/
## Designed to be included in any server {} block.
## Please note that you need a PHP-FPM upstream configured in the http context, and its name set in the $fpm_upstream variable.
## https://github.com/bcremer/shopware-with-nginx

# Nginx will not handle the BAN method on static paths, rewrite request to be handled by fastcgi.
#  * customize 'purge_allowed_ips' in 'httpcache' section in config.php if request does not originate from localhost
#  * make sure the requests aren't schema redirected. This will alter the method to GET and be defective
if ($request_method = BAN) {
    rewrite ^ /shopware.php last;
}

location = /favicon.ico {
    log_not_found off;
    access_log off;
}

## Deny all attempts to access hidden files such as .env, .htaccess, .htpasswd, .DS_Store (Mac).
location ~ /\. {
    return 404;
}

## Deny all attems to access possible configuration files
location ~ \.(tpl|yml|ini|log)$ {
    return 404;
}

## Deny access to media upload folder
location ^~ /media/temp/ {
    return 404;
}

# Shopware caches and logs
location ^~ /var/ {
    return 404;
}

# Deny access to root files
location ~ (autoload\.php|composer\.(json|lock|phar)|CONTRIBUTING\.md|eula.*\.txt|license\.txt|README\.md|UPGRADE-(.*)\.md|.*\.dist)$ {
    return 404;
}

# Restrict access to shop configs files
location ~ /(web\/cache\/(config_\d+\.json|all.less))$ {
    return 404;
}

# Restrict access to theme configurations
location ~ /themes/(.*)(.*\.lock|package\.json|Gruntfile\.js|all\.less)$ {
    return 404;
}

location ^~ /files/documents/ {
    return 404;
}

location ^~ /files/backup/ {
    return 404;
}

# Restrict access to plugin xmls
location ~ /custom/.*(config|menu|services|plugin)\.xml$ {
    # rewrite, because this is the default behaviour for non-existing files and
    # makes it difficult to detect whether a plugin is installed or not by checking the files
    rewrite . /shopware.php?controller=Error&action=pageNotFoundError last;
}

# Block direct access to ESDs, but allow the follwing download options:
#  * 'PHP' (slow)
#  * 'X-Accel' (optimized)
# Also see http://wiki.shopware.com/ESD_detail_1116.html#Ab_Shopware_4.2.2
# With Shopware 5.5 a esdKey will be generated in the installation process, please consider changing this value
location ^~ /files/552211cce724117c3178e3d22bec532ec/ {
    internal;
}

# Shopware install / update
location /recovery/install {
    index index.php;
    try_files $uri /recovery/install/index.php$is_args$args;
}

location /recovery/update/ {
    location /recovery/update/assets {
    }
    if (!-e $request_filename){
        rewrite . /recovery/update/index.php last;
    }
}

location / {
    location ~* "^/themes/Frontend/(?:.+)/frontend/_public/(?:.+)\.(?:ttf|eot|svg|woff|woff2)$" {
        expires max;
        add_header Cache-Control "public";
        access_log off;
        log_not_found off;
    }

    location ~* "^/web/cache/(?:[0-9]{10})_(?:.+)\.(?:js|css)$" {
        expires max;
        add_header Cache-Control "public";
        access_log off;
        log_not_found off;
    }


    ## All static files will be served directly.
    location ~* ^.+\.(?:css|cur|js|jpe?g|gif|ico|png|svg|webp|html)$ {
        ## Defining rewrite rules
        rewrite files/documents/.* /engine last;
        rewrite backend/media/(.*) /media/$1 last;

        expires 1w;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";

        access_log off;
        # The directive enables or disables messages in error_log about files not found on disk.
        log_not_found off;

        tcp_nodelay off;
        ## Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;

        ## Fallback to shopware
        ## comment in if needed
        try_files $uri /shopware.php?controller=Media&action=fallback;
    }

    index shopware.php index.php;
    try_files $uri $uri/ /shopware.php$is_args$args;
}

## XML Sitemap support.
location = /sitemap.xml {
    log_not_found off;
    access_log off;
    try_files $uri @shopware;
}

## XML SitemapMobile support.
location = /sitemapMobile.xml {
    log_not_found off;
    access_log off;
    try_files $uri @shopware;
}

## robots.txt support.
location = /robots.txt {
    log_not_found off;
    access_log off;
    try_files $uri @shopware;
}

location @shopware {
    rewrite / /shopware.php;
}

location ~ \.php$ {
    try_files $uri $uri/ =404;

    ## NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    fastcgi_split_path_info ^(.+\.php)(/.+)$;

    ## required for upstream keepalive
    # disabled due to failed connections
    #fastcgi_keep_conn on;

    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
    fastcgi_param SHOPWARE_ENV    $shopware_env if_not_empty;

    # Mitigate httpoxy vulnerability, see: https://httpoxy.org/
    fastcgi_param HTTP_PROXY "";

    fastcgi_buffers 8 16k;
    fastcgi_buffer_size 32k;

    client_max_body_size 24M;
    client_body_buffer_size 128k;

    ## Set $fpm_upstream in your server block
    fastcgi_pass $fpm_upstream;

    ## Support for HTTP/2 Server Push
    ## Available in NGINX version 1.13.9 and up
    http2_push_preload on;
}
{% endblock %}
